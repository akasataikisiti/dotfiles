#! /bin/bash
echo "read aliasrc"

# カレントディレクトリ配下をfzf検索しエディタで開く
nf(){
  NVIM_LAZY_MINE=nvim-lazy-mine
  fzf | \
  xargs -rI {} sh -c 'NVIM_APPNAME=$NVIM_LAZY_MINE nvim "$1"' -- {}; # nvim-lazy-mineを使いたいため無理やり
  # xargs -rI {} $EDITOR "{}" ;  # betternvimのせいで自分のエディタが起動しない
}


# Manページをvimで開く
nam(){  eval "nv -c \"Man $1 | only\"" ; }
# チートシートを検索
ccs(){
  if [ $# -eq 1 ]; then
    curl "https://cheat.sh/$1" ;
  elif [ $# -eq 2 ]; then
    curl "https://cheat.sh/$1/$2" ;
  fi
}


wtr(){
  if [ $# -eq 0 ]; then
    curl wttr.in/Katsushika
  else
    curl wttr.in/$1
  fi
}

# fzfを使って上の階層に移動
cu(){
  local cur_dir=$(pwd)
  local home_dir="$HOME"

  # 保存された元のFZF_DEFAULT_OPTSをバックアップ
  local old_fzf_default_opts="$FZF_DEFAULT_OPTS"
  
  # Check if the current directory is inside a git repository
  if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    local root_dir=$(git rev-parse --show-toplevel)
  elif [[ $cur_dir == $home_dir* ]]; then
    local root_dir=$home_dir
  else
    local root_dir="/"
  fi

  local relative_dir=${cur_dir#$root_dir}
  IFS='/' read -r -a dirs <<< "$relative_dir"
  local dist="$root_dir"

  local options=("$root_dir")
  for dir in "${dirs[@]}"; do
    if [ -n "$dir" ]; then
      dist="${dist%/}/$dir"
      options+=("$dist")
    fi
  done

  # Set FZF options for preview
  export FZF_DEFAULT_OPTS='--preview "ls -al --color=auto {}"'

  local selected=$(printf "%s\n" "${options[@]}" | fzf)

  if [ -n "$selected" ]; then
    cd "$selected"
  else
    echo "No selection made."
  fi

  # 元のFZF_DEFAULT_OPTSを復元
  export FZF_DEFAULT_OPTS="$old_fzf_default_opts"
}

cf() {
  local dir
  local old_fzf_default_opts="$FZF_DEFAULT_OPTS"
  export FZF_DEFAULT_OPTS="--cycle --preview 'tree -C {} | head -50'"
  dir=$(find . -maxdepth 1 -type d -not -path '.' -printf '%P\n' | fzf )
  if [ -n "$dir" ]; then
    cd "$dir"
  fi
  export FZF_DEFAULT_OPTS="$old_fzf_default_opts"
}

selemoji() {
    # curl コマンドを実行してエラーが起きたらスクリプトを終了
    local emojis=$(curl -sSL 'https://git.io/JXXO7')
    if [ $? -ne 0 ]; then
        echo "Error: Failed to fetch emojis." >&2
        return 1
    fi

    # 空のチェック
    if [ -z "$emojis" ]; then
        echo "Error: No emojis found." >&2
        return 1
    fi

    # fzf で絵文字を選択
    local selected_emoji=$(echo "$emojis" | fzf)
    if [ -z "$selected_emoji" ]; then
        echo "No emoji selected."
        return 1
    fi

    # 選択された絵文字を表示
    echo "Selected emoji: $selected_emoji"
    return 0
}

man-find() {
    f=$(fd . $MANPATH/man${1:-1} -t f -x echo {/.} | fzf) && man $f
}
fman() {
    man -k . | fzf -q "$1" --prompt='man> '  --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r man | col -bx | bat -l man -p --color always' | tr -d '()' | awk '{printf "%s ", $2} {print $1}' | xargs -r man
}
fn() {
    local man_page
    man_page=$(man -k . \
        | fzf -q "$1" \
          --prompt='man> ' \
          --preview $'echo {} | awk -F \'[()]\' \'{print $2, $1}\' | xargs -r man | col -bx | bat -l man -p --color always' \
          | awk -F '[()]' '{print $2, $1}')
    [ -n "$man_page" ] && eval "nv -c \"Man $man_page | only\""
    # 生成される文字の確認
    # printf "%s\n" "$man_page"
}
# Get the colors in the opened man page itself
export MANPAGER="sh -c 'col -bx | bat -l man -p --paging always'"


